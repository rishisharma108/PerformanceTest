<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
      </CookieManager>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">false</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - user actions" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="dashboardThroughput" elementType="Argument">
            <stringProp name="Argument.name">dashboardThroughput</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">30</stringProp>
          </elementProp>
          <elementProp name="usersThroughput" elementType="Argument">
            <stringProp name="Argument.name">usersThroughput</stringProp>
            <stringProp name="Argument.value">11</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">11</stringProp>
          </elementProp>
          <elementProp name="usersOptionsThroughput" elementType="Argument">
            <stringProp name="Argument.name">usersOptionsThroughput</stringProp>
            <stringProp name="Argument.value">6</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">6</stringProp>
          </elementProp>
          <elementProp name="devicesThroughput" elementType="Argument">
            <stringProp name="Argument.name">devicesThroughput</stringProp>
            <stringProp name="Argument.value">4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">4</stringProp>
          </elementProp>
          <elementProp name="devicesOptionsThroughput" elementType="Argument">
            <stringProp name="Argument.name">devicesOptionsThroughput</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">3</stringProp>
          </elementProp>
          <elementProp name="servicesThroughput" elementType="Argument">
            <stringProp name="Argument.name">servicesThroughput</stringProp>
            <stringProp name="Argument.value">8</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">8</stringProp>
          </elementProp>
          <elementProp name="servicesOptionsThroughput" elementType="Argument">
            <stringProp name="Argument.name">servicesOptionsThroughput</stringProp>
            <stringProp name="Argument.value">22</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">22</stringProp>
          </elementProp>
          <elementProp name="settingsThroughput" elementType="Argument">
            <stringProp name="Argument.name">settingsThroughput</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1</stringProp>
          </elementProp>
          <elementProp name="windowsDeviceId" elementType="Argument">
            <stringProp name="Argument.name">windowsDeviceId</stringProp>
            <stringProp name="Argument.value">NOT_FOUND</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - devices" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="timeDelay" elementType="Argument">
            <stringProp name="Argument.name">timeDelay</stringProp>
            <stringProp name="Argument.value">3000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ip" elementType="Argument">
            <stringProp name="Argument.name">ip</stringProp>
            <stringProp name="Argument.value">stable.lightaria.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="server_public_key" elementType="Argument">
            <stringProp name="Argument.name">server_public_key</stringProp>
            <stringProp name="Argument.value">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA16ovlQb1GSQqvKq9q2XoEs0UmPw4c1riFduMkfF9bprDaAdd4EqIXD3a/X8v6zBNdJovXKDle/ECr2lHRCMJimSyZ19/64kklYKhszhFnZJyFhn9oAWS/l4kOJnq+0YAwJ5lJnUETCMUCm4ymeyOqCAg+kM1xuWLm0N6RIhIR1M+r+26se/mRIMDpg4Y2ZTYOmm4ZZUo/fiqps2BkFckHVcFM3ZjSUKzBTd0qJSQ4obRr+mEJkusk4HbcnYb6g0hiSQbc9iLexIeGvQLnwjuQ9i110wn/KVuEewY7Y0y2jkEJvJqAFSp+1UvK9nUbGOp6sN+I/0CgF4U7bmziQUJWwIDAQAB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="time_stamp" elementType="Argument">
            <stringProp name="Argument.name">time_stamp</stringProp>
            <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}T${__time(HH:mm:ss.sss,)}Z</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="deviceType" elementType="Argument">
            <stringProp name="Argument.name">deviceType</stringProp>
            <stringProp name="Argument.value">Notebook</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="processorType" elementType="Argument">
            <stringProp name="Argument.name">processorType</stringProp>
            <stringProp name="Argument.value">Intel Core i7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="memoryType" elementType="Argument">
            <stringProp name="Argument.name">memoryType</stringProp>
            <stringProp name="Argument.value">16 GB 1600 MHz DDR 3 SDRAM</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="diskType" elementType="Argument">
            <stringProp name="Argument.name">diskType</stringProp>
            <stringProp name="Argument.value">256 GB SATA SSD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="graphicsType" elementType="Argument">
            <stringProp name="Argument.name">graphicsType</stringProp>
            <stringProp name="Argument.value">Awesome Graphics Card</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="osType" elementType="Argument">
            <stringProp name="Argument.name">osType</stringProp>
            <stringProp name="Argument.value">Windows 8 Pro</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="manfac" elementType="Argument">
            <stringProp name="Argument.name">manfac</stringProp>
            <stringProp name="Argument.value">Hewlett-Packard</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pno" elementType="Argument">
            <stringProp name="Argument.name">pno</stringProp>
            <stringProp name="Argument.value">03a9ed-8b</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="country" elementType="Argument">
            <stringProp name="Argument.name">country</stringProp>
            <stringProp name="Argument.value">US</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="deviceModel" elementType="Argument">
            <stringProp name="Argument.name">deviceModel</stringProp>
            <stringProp name="Argument.value">HP EliteBook 850</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="shellFileDirectory" elementType="Argument">
            <stringProp name="Argument.name">shellFileDirectory</stringProp>
            <stringProp name="Argument.value">/home/rishi/jmeter/jmeter/bin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="installSoftwareJob" elementType="Argument">
            <stringProp name="Argument.name">installSoftwareJob</stringProp>
            <stringProp name="Argument.value">incomplete</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RESPONSE_CODE" elementType="Argument">
            <stringProp name="Argument.name">RESPONSE_CODE</stringProp>
            <stringProp name="Argument.value">503</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="company_pin" elementType="Argument">
            <stringProp name="Argument.name">company_pin</stringProp>
            <stringProp name="Argument.value">f2hMYqz5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="InstanceID" elementType="Argument">
            <stringProp name="Argument.name">InstanceID</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="email1" elementType="Argument">
            <stringProp name="Argument.name">email1</stringProp>
            <stringProp name="Argument.value">rajat.jain@mobiliya.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username1" elementType="Argument">
            <stringProp name="Argument.name">username1</stringProp>
            <stringProp name="Argument.value">rajat.jain</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="apps" elementType="Argument">
            <stringProp name="Argument.name">apps</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1513746269000</longProp>
        <longProp name="ThreadGroup.end_time">1513746269000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${shellFileDirectory}/newDeviceData1.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">deviceSerialNumber,deviceId,devicePublicKey,devicePrivateKey,deviceSignature,email,deviceName,username</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.001) Location Registry" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ip}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/location-registry/v1/locations/${company_pin}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${__P(company_pin)}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Expect" elementType="Header">
                <stringProp name="Header.name">Expect</stringProp>
                <stringProp name="Header.value">100-continue</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept-charset" elementType="Header">
                <stringProp name="Header.name">accept-charset</stringProp>
                <stringProp name="Header.value">utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.002) Sign-in through company pin" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;user&quot;:{&quot;authority&quot;:&quot;hptpm/otp&quot;,&quot;detected_username&quot;:&quot;${username1}&quot;,&quot;email&quot;:&quot;${email1}&quot;,&quot;credentials&quot;:&quot;${company_pin}&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ip}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/users/sign_in</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Expect" elementType="Header">
                <stringProp name="Header.name">Expect</stringProp>
                <stringProp name="Header.value">100-continue</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept-charset" elementType="Header">
                <stringProp name="Header.name">accept-charset</stringProp>
                <stringProp name="Header.value">utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">authenticationToken</stringProp>
            <stringProp name="RegexExtractor.regex">authentication_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOTAUTHORIZED</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.003) Provisioning" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="auth_token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">auth_token</stringProp>
                <stringProp name="Argument.value">${authenticationToken}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ip}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/devices/provision</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept-charset" elementType="Header">
                <stringProp name="Header.name">accept-charset</stringProp>
                <stringProp name="Header.value">utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">publicKey</stringProp>
            <stringProp name="RegexExtractor.regex">\&quot;server\_public\_key&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.004) Enroll Device" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;device&quot;:{&quot;client_type&quot;:&quot;Agent&quot;,&quot;public_key&quot;:&quot;${devicePublicKey}&quot;,&quot;name&quot;:&quot;${deviceName}&quot;,&quot;device_type&quot;:&quot;${deviceType}&quot;,&quot;processor&quot;:&quot;${processorType}&quot;,&quot;memory&quot;:&quot;${memoryType}&quot;,&quot;disk&quot;:&quot;${diskType}&quot;,&quot;graphics&quot;:&quot;${graphicsType}&quot;,&quot;operating_system&quot;:&quot;${osType}&quot;,&quot;serial_number&quot;:&quot;${deviceSerialNumber}&quot;,&quot;os_architecture&quot;:&quot;amd64&quot;,&quot;os_system_ui_lang&quot;:&quot;en-us&quot;,&quot;device_id&quot;:&quot;${deviceId}&quot;,&quot;manufacturer&quot;:&quot;${manfac}&quot;,&quot;product_number&quot;:&quot;${pno}&quot;,&quot;country_code&quot;:&quot;${country}&quot;,&quot;byod&quot;:false,&quot;device_model&quot;:&quot;${deviceModel}&quot;},&quot;analytics&quot;: {&quot;date_time&quot;:&quot;${time_stamp}&quot;,&quot;analytics_class_version&quot;: &quot;1.0&quot;,&quot;client_version&quot;: &quot;1.23.7.1&quot;,&quot;enroll_method&quot;: &quot;Company Pin&quot;,&quot;enroll_status&quot;: &quot;&quot;,    &quot;failure_reason&quot;: &quot;&quot;,&quot;silent_param_used&quot;: &quot;Non-Silent&quot;,&quot;optin_silent&quot;: &quot;Loud&quot;,&quot;enrollment_confirmation_selection&quot;: &quot;Accepted&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ip}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/devices/enroll?auth_token=${authenticationToken}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Expect" elementType="Header">
                <stringProp name="Header.name">Expect</stringProp>
                <stringProp name="Header.value">100-continue</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept-charset" elementType="Header">
                <stringProp name="Header.name">accept-charset</stringProp>
                <stringProp name="Header.value">utf-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.005) Device authentication" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;device&quot;:{&quot;device_id&quot;:&quot;${deviceId}&quot;,&quot;device_id_signature&quot;:&quot;${deviceSignature}&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ip}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/devices/authenticate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${ip}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - authentication token" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">authenticationToken</stringProp>
            <stringProp name="RegexExtractor.regex">token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOTAUTHORIZED</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${timeDelay}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler for RSA private key" enabled="true">
          <stringProp name="BeanShellSampler.query">String deviceId = vars.get(&quot;deviceId&quot;);
String devicePrivateKey=vars.get(&quot;devicePrivateKey&quot;);
FileWriter fstream = new FileWriter(deviceId + &quot;.pem&quot;, false);
BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;-----BEGIN RSA PRIVATE KEY-----&quot;);
out.newLine();
out.write(devicePrivateKey.replaceAll(&quot;(.{63})&quot;, &quot;$1\n&quot;));
out.newLine();
out.write(&quot;-----END RSA PRIVATE KEY-----&quot;);
out.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="AppInventory Event " enabled="true"/>
        <hashTree>
          <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="AppInventory Event OS Process Sampler" enabled="true">
            <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
            <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
            <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
            <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">${filename}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">${deviceId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SystemSampler.directory"></stringProp>
          </SystemSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.*;
import org.apache.jmeter.services.FileServer;
StringBuilder payload = new StringBuilder();
String[] appName;
String linesplitter = &quot;,&quot;;
String appname = &quot;McAfee&quot;;
String publisher = &quot;com.touchtype.swiftkey&quot;;
String appid = &quot;com.touchtype.swiftkey&quot;;
String date = &quot;1970-02-11T16:29:18.274+00:00&quot;;
String[] applist = {&quot;McAfee&quot;,&quot;Norton&quot;};
String[] packageName ={&quot;com.touchtype.swiftkey&quot;,&quot;com.pdf.foxit&quot;};
String line =&quot;&quot;;
String[] app = line.split(linesplitter);
//String csvFile = &quot;apps.csv&quot;;
//String filepath = &quot;./src/main/resources/app.csv&quot;;
ArrayList csvfileds = new ArrayList();
ArrayList pkgName = new ArrayList();
ArrayList pkgid = new ArrayList();
String path = FileServer.getFileServer().getBaseDir();
log.info(&quot;File Path is:&quot; + path);
try{
	BufferedReader br = new BufferedReader(new FileReader(new File(path+&quot;/apps.csv&quot;)));
		{
			 while ((line = br.readLine()) != null) 
			 {
				 
				  appName = line.split(linesplitter);
				
				 csvfileds.add(appName[1]);
				 pkgName.add(appName[2]);
				 pkgid.add(appName[3]);
				//System.out.println(&quot;CSV Fields&quot; + csvfileds);
				
			 }
			 log.info(&quot;CSV Fields&quot; + csvfileds);
		    }
}
catch(IOException ex)
		 {
			
			System.out.println(&quot;Unable to read file&quot;);
			
		 }
int iteration = 34;
		if (iteration == 1) {
			for (int i = 0; i &lt; iteration; i++) {
				payload.append(&quot;\&quot;[&quot;);
				payload.append(&quot;{\\\&quot;install_date\\\&quot;:\\\&quot;&quot; + date + &quot;\\\&quot;&quot;);
				payload.append(linesplitter);
				payload.append(
						&quot;\\\&quot;install_location\\\&quot;:\\\&quot;/data/app\\\&quot;,\\\&quot;last_update\\\&quot;:\\\&quot;1970-02-11T16:29:18.274+00:00\\\&quot;,&quot;);
				// payload.append(&quot;\\\&quot;name\\:&quot;\\\&quot;+appname);
				payload.append(&quot;\\\&quot;name\\\&quot;:\\\&quot;&quot; + csvfileds.get(i) + &quot;\\\&quot;,\\\&quot;id\\\&quot;:\\\&quot;&quot; + appid
						+ &quot;\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;&quot; + publisher
						+ &quot;\\\&quot;,\\\&quot;store_version\\\&quot;:\\\&quot;809568596\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;sw-android\\\&quot;,\\\&quot;version\\\&quot;:\\\&quot;6.2.1.149\\\&quot;&quot;);
				payload.append(&quot;}&quot;);
				// payload.append(linesplitter);
				payload.append(&quot;]\&quot;&quot;);
			}
		} else {
			payload.append(&quot;\&quot;[&quot;);
			// payload.append(&quot;\&quot;payload\&quot;:&quot;);
			for (int i = 0; i &lt; iteration; i++) {
				payload.append(&quot;{\\\&quot;install_date\\\&quot;:\\\&quot;&quot; + date + &quot;\\\&quot;&quot;);
				payload.append(linesplitter);
				payload.append(
						&quot;\\\&quot;install_location\\\&quot;:\\\&quot;/data/app\\\&quot;,\\\&quot;last_update\\\&quot;:\\\&quot;1970-02-11T16:29:18.274+00:00\\\&quot;,&quot;);
				// payload.append(&quot;\\\&quot;name\\:&quot;\\\&quot;+appname);
				payload.append(&quot;\\\&quot;name\\\&quot;:\\\&quot;&quot; + csvfileds.get(i) + &quot;\\\&quot;,\\\&quot;id\\\&quot;:\\\&quot;&quot; + pkgName.get(i)
						+ &quot;\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;&quot; + pkgid.get(i)
						+ &quot;\\\&quot;,\\\&quot;store_version\\\&quot;:\\\&quot;809568596\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;sw-android\\\&quot;,\\\&quot;version\\\&quot;:\\\&quot;6.2.1.149\\\&quot;&quot;);
				payload.append(&quot;}&quot;);
				payload.append(linesplitter);
				
			}
			payload.deleteCharAt(payload.length()-1);
			payload.append(&quot;]\&quot;&quot;);
			//payload.append(linesplitter);

		}
//System.out.println(&quot;Payload is :&quot; + payload.toString());
log.info(&quot;The payload String generated by first Beanshell&quot; + payload.toString());
vars.put(&quot;json&quot;,payload.toString());</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String jsoni = vars.get(&quot;json&quot;);
String payload = &quot;\&quot;payload\&quot;:&quot;;
String cpayload = payload+jsoni;
String eventPayload =&quot;{\&quot;event_type\&quot;:\&quot;announced-inventory-changed\&quot;,\&quot;payload\&quot;:&quot;+jsoni+&quot;\\\&quot;severity\&quot;:\&quot;info\&quot;,\&quot;service_key\&quot;:\&quot;/com.hp/swinv/app-inventory/v1\&quot;}&quot;; 
vars.put(&quot;gson&quot;,cpayload);
log.info(&quot;json is :&quot;+ json +&quot;Printed by 2nd Beanshell&quot;);
log.info(&quot;Event Payload is :&quot; + eventPayload);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">StringBuilder payload = new StringBuilder();
String linesplitter = &quot;,&quot;;
String appname = &quot;McAfee&quot;;
String publisher = &quot;com.touchtype.swiftkey&quot;;
String appid = &quot;com.touchtype.swiftkey&quot;;
String date = &quot;1970-02-11T16:29:18.274+00:00&quot;;
String[] applist = {&quot;McAfee&quot;,&quot;Norton&quot;};
String[] packageName ={&quot;com.touchtype.swiftkey&quot;,&quot;com.pdf.foxit&quot;};
int iteration = 2;
if (iteration == 1) {
for (int i = 0; i &lt; iteration; i++) {
payload.append(&quot;\&quot;[&quot;);
payload.append(&quot;{\\\&quot;install_date\\\&quot;:\\\&quot;&quot; + date + &quot;\\\&quot;&quot;);
payload.append(linesplitter);
payload.append(&quot;\\\&quot;install_location\\\&quot;:\\\&quot;/data/app\\\&quot;,\\\&quot;last_update\\\&quot;:\\\&quot;1970-02-11T16:29:18.274+00:00\\\&quot;,&quot;);
// payload.append(&quot;\\\&quot;name\\:&quot;\\\&quot;+appname);
payload.append(&quot;\\\&quot;name\\\&quot;:\\\&quot;&quot; + applist[i] + &quot;\\\&quot;,\\\&quot;id\\\&quot;:\\\&quot;&quot; + packageName[i]+ &quot;\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;&quot; + packageName[i]+ &quot;\\\&quot;,\\\&quot;store_version\\\&quot;:\\\&quot;809568596\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;sw-android\\\&quot;,\\\&quot;version\\\&quot;:\\\&quot;6.2.1.149\\\&quot;&quot;);
payload.append(&quot;}&quot;);
// payload.append(linesplitter);
payload.append(&quot;]\&quot;&quot;);
}
} 
else {payload.append(&quot;\&quot;[&quot;);
			// payload.append(&quot;\&quot;payload\&quot;:&quot;);
for (int i = 0; i &lt; iteration; i++) {
payload.append(&quot;{\\\&quot;install_date\\\&quot;:\\\&quot;&quot; + date + &quot;\\\&quot;&quot;);
payload.append(linesplitter);
payload.append(&quot;\\\&quot;install_location\\\&quot;:\\\&quot;/data/app\\\&quot;,\\\&quot;last_update\\\&quot;:\\\&quot;1970-02-11T16:29:18.274+00:00\\\&quot;,&quot;);
// payload.append(&quot;\\\&quot;name\\:&quot;\\\&quot;+appname);
payload.append(&quot;\\\&quot;name\\\&quot;:\\\&quot;&quot; + applist[i] + &quot;\\\&quot;,\\\&quot;id\\\&quot;:\\\&quot;&quot; + packageName[i] + &quot;\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;&quot; + packageName[i]+ &quot;\\\&quot;,\\\&quot;store_version\\\&quot;:\\\&quot;809568596\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;sw-android\\\&quot;,\\\&quot;version\\\&quot;:\\\&quot;6.2.1.149\\\&quot;&quot;);
payload.append(&quot;}&quot;);
payload.append(linesplitter);
}
payload.deleteCharAt(payload.length()-1);
payload.append(&quot;]\&quot;&quot;);
//payload.append(linesplitter);
}
System.out.println(&quot;Payload is :&quot; + payload.toString());
log.info(&quot;The payload String generated by first Beanshell&quot; + payload.toString());
vars.put(&quot;json&quot;,payload.toString());</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="App Inventory Security Block BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">true</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;
String jsoni = vars.get(&quot;json&quot;);
java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.03Z&quot;;
String endPointUid = vars.get(&quot;deviceId&quot;);
String eventPayload =&quot;{\&quot;event_type\&quot;:\&quot;announced-inventory-changed\&quot;,\&quot;payload\&quot;:&quot;+jsoni+&quot;,\&quot;severity\&quot;:\&quot;info\&quot;,\&quot;service_key\&quot;:\&quot;/com.hp/swinv/app-inventory/v1\&quot;}&quot;; 
byte[] eventPayloadByteArray = eventPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(eventPayloadByteArray);
String eventPayloadHash =  Base64.getEncoder().encodeToString(digester.digest());
vars.put(&quot;eventPayload&quot;,eventPayload);
dPubKey=vars.get(&quot;devicePublicKey&quot;);
device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);
serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot; + &quot;\&quot;device_pub_key\&quot;&quot;+&quot;:&quot;+ &quot;\&quot;&quot; +dPubKey +&quot;\&quot;&quot;+&quot;,&quot;+&quot;\&quot;event_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ eventPayloadHash+&quot;\&quot;&quot;+&quot;}&quot;;
vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();
log.info(&quot;EventPayload is :&quot; + eventPayload);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.010) AppInventory Event Automated Generated Payload" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;event&quot;:{&quot;event_payload&quot;:${eventPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/events?auth_token=${authenticationToken}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${ip}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Expect</stringProp>
                  <stringProp name="Header.value">100-continue</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${timeDelay}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PUT Jobs" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data -Device data -New" enabled="false">
            <stringProp name="filename">/home/rajat/Desktop/Local/enrolled_device.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">deviceSerialNumber,deviceId,devicePublicKey,devicePrivateKey,deviceSignature,email,deviceName,username</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.005) Device authentication" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;device&quot;:{&quot;device_id&quot;:&quot;${deviceId}&quot;,&quot;device_id_signature&quot;:&quot;${deviceSignature}&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/devices/authenticate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Expect" elementType="Header">
                  <stringProp name="Header.name">Expect</stringProp>
                  <stringProp name="Header.value">100-continue</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept-charset" elementType="Header">
                  <stringProp name="Header.name">accept-charset</stringProp>
                  <stringProp name="Header.value">utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - device authentication token" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">DeviceToken</stringProp>
              <stringProp name="RegexExtractor.regex">token&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">invalid device ID or signature</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - responsecode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responsecode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">responsecode</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${responsecode}==&quot;200&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler for RSA private key" enabled="true">
              <stringProp name="BeanShellSampler.query">String deviceId = vars.get(&quot;deviceId&quot;);
String devicePrivateKey=vars.get(&quot;devicePrivateKey&quot;);
FileWriter fstream = new FileWriter(deviceId + &quot;.pem&quot;, false);
BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;-----BEGIN RSA PRIVATE KEY-----&quot;);
out.newLine();
out.write(devicePrivateKey.replaceAll(&quot;(.{63})&quot;, &quot;$1\n&quot;));
out.newLine();
out.write(&quot;-----END RSA PRIVATE KEY-----&quot;);
out.close();</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.006) Device update " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;name&quot;:&quot;${deviceName}&quot;,&quot;processor&quot;:&quot;${processorType}&quot;,&quot;memory&quot;:&quot;${memoryType}&quot;,&quot;disk&quot;:&quot;${diskType}&quot;,&quot;graphics&quot;:&quot;${graphicsType}&quot;,&quot;operating_system&quot;:&quot;${osType}&quot;,&quot;os_architecture&quot;:&quot;amd64&quot;,&quot;os_system_ui_lang&quot;:&quot;en-us&quot;,&quot;manufacturer&quot;:&quot;${manfac}&quot;,&quot;device_model&quot;:&quot;${deviceModel}&quot;,&quot;uuid&quot;:&quot;${uuid_value}&quot;,&quot;platform_id&quot;:&quot;8100&quot;,&quot;bios_version&quot;:&quot;01.06&quot;,&quot;internal_ssd_present&quot;:false,&quot;internal_encrypted_sed_present&quot;:false,&quot;last_logged_user&quot;:&quot;Spectra&quot;,&quot;device_id&quot;:&quot;${deviceId}&quot;,&quot;client_version&quot;:&quot;1.22.9.1&quot;,&quot;installed_services&quot;:[&quot;coreService_hp_1.0&quot;,&quot;deviceProtection_hp_1.0&quot;,&quot;geoSecurity_hp_1.0&quot;,&quot;jobScheduler_hp_1.0&quot;,&quot;patches_hp_1.0&quot;,&quot;softwarePackageManager_hp_1.0&quot;,&quot;systemHealthManager_hp_1.0&quot;,&quot;windowsStoreAppCatalog_hp_1.0&quot;],&quot;auth_token&quot;:&quot;[FILTERED]&quot;,&quot;device&quot;:{&quot;name&quot;:&quot;${deviceName}&quot;,&quot;processor&quot;:&quot;${processorType}&quot;,&quot;memory&quot;:&quot;${memoryType}&quot;,&quot;disk&quot;:&quot;${diskType}&quot;,&quot;graphics&quot;:&quot;${graphicsType}&quot;,&quot;operating_system&quot;:&quot;${osType}&quot;,&quot;device_model&quot;:&quot;${deviceModel}&quot;,&quot;manufacturer&quot;:&quot;${manfac}&quot;,&quot;os_architecture&quot;:&quot;amd64&quot;,&quot;os_system_ui_lang&quot;:&quot;en-us&quot;,&quot;client_version&quot;:&quot;1.22.9.1&quot;,&quot;installed_services&quot;:[&quot;coreService_hp_1.0&quot;,&quot;deviceProtection_hp_1.0&quot;,&quot;geoSecurity_hp_1.0&quot;,&quot;jobScheduler_hp_1.0&quot;,&quot;patches_hp_1.0&quot;,&quot;softwarePackageManager_hp_1.0&quot;,&quot;systemHealthManager_hp_1.0&quot;,&quot;windowsStoreAppCatalog_hp_1.0&quot;],&quot;last_logged_user&quot;:&quot;Spectra&quot;,&quot;bios_version&quot;:&quot;01.03&quot;}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/devices/${deviceId}?auth_token=${DeviceToken}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${ip}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Expect</stringProp>
                    <stringProp name="Header.value">100-continue</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Polling_Jobs" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.008) Device Polling" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="auth_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${DeviceToken}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">auth_token</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/v1/jobs/</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">bsil.lightaria.com</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - job type" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">jobTypeExtracted</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;job_type&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTFOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="Scope.variable">jobPayload</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Job ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">jobId</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTFOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                  <stringProp name="Scope.variable">jobPayload</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">endpoint_uid</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;endpoint_uid&quot;:&quot;(.+?)&quot;},</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOTFOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">15000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
                <stringProp name="ForeachController.inputVal">jobTypeExtracted</stringProp>
                <stringProp name="ForeachController.returnVal">jobType</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${jobId_matchNr}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">intCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for AnalyticsConfigurationPolicies" enabled="true">
                  <stringProp name="IfController.condition">&quot;${__V(jobTypeExtracted_${intCounter})}&quot;==&quot;AnalyticsConfigurationPolicies&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="AnalyticsConfigurationPolicies_dispatched_OS_Process_Sampler" enabled="true">
                    <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                    <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                    <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                    <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="SystemSampler.directory"></stringProp>
                  </SystemSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                      <boolProp name="resetInterpreter">true</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;

java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.03Z&quot;;

String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));

String endPointUid = vars.get(&quot;endpoint_uid&quot;);

String jobPayload=&quot;{\&quot;id\&quot;:&quot;+jobId+&quot;,\&quot;state\&quot;:\&quot;dispatched\&quot;,\&quot;result\&quot;:\&quot;\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
byte[] jobPayloadByteArray = jobPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(jobPayloadByteArray);
String payloadHash =  Base64.getEncoder().encodeToString(digester.digest());
vars.put(&quot;jobPayload&quot;,jobPayload);

dPubKey=vars.get(&quot;devicePublicKey&quot;);

device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);

serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot;+&quot;\&quot;job_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ payloadHash+&quot;\&quot;&quot;+&quot;}&quot;;

vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.009) AnalyticsConfigurationPolicies Status Dispatched Job" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;job&quot;:{&quot;job_payload&quot;:${jobPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/v1/jobs/${__V(jobId_${intCounter})}?auth_token=${DeviceToken}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${ip}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Expect</stringProp>
                          <stringProp name="Header.value">100-continue</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="AnalyticsConfigurationPolicies_finished_OS_Process_Sampler" enabled="true">
                    <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                    <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                    <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                    <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="SystemSampler.directory"></stringProp>
                  </SystemSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                      <boolProp name="resetInterpreter">true</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;

java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.43Z&quot;;

String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));

String endPointUid = vars.get(&quot;endpoint_uid&quot;);
String jobPayload = &quot;{\&quot;id\&quot;:&quot;+jobId+&quot;,\&quot;state\&quot;:\&quot;finished\&quot;,\&quot;result\&quot;:\&quot;success\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;

byte[] jobPayloadByteArray = jobPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(jobPayloadByteArray);
String payloadHash =  Base64.getEncoder().encodeToString(digester.digest());
vars.put(&quot;jobPayload&quot;,jobPayload);

dPubKey=vars.get(&quot;devicePublicKey&quot;);

device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);

serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot;+&quot;\&quot;job_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ payloadHash+&quot;\&quot;&quot;+&quot;}&quot;;

vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.010) AnalyticsConfigurationPolicies Status Finished Job" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;job&quot;:{&quot;job_payload&quot;:${jobPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/v1/jobs/${__V(jobId_${intCounter})}?auth_token=${DeviceToken}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="TestPlan.comments">?auth_token=${authenticationToken}</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${ip}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Expect</stringProp>
                          <stringProp name="Header.value">100-continue</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">vars.put(&quot;jobType&quot;,&quot;&quot;);
vars.put(&quot;jobId&quot;,&quot;&quot;);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for MPIPolicyOptions" enabled="true">
                  <stringProp name="IfController.condition">&quot;${__V(jobTypeExtracted_${intCounter})}&quot;==&quot;MPIPolicyOptions&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="MPIPolicyOptions Status Dispatched OS Process Sampler" enabled="true">
                    <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                    <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                    <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                    <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="SystemSampler.directory"></stringProp>
                  </SystemSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                      <boolProp name="resetInterpreter">true</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;

java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.03Z&quot;;

String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));

String endPointUid = vars.get(&quot;endpoint_uid&quot;);
String jobPayload=&quot;{\&quot;id\&quot;:&quot;+jobId+&quot;,\&quot;state\&quot;:\&quot;dispatched\&quot;,\&quot;result\&quot;:\&quot;\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
byte[] jobPayloadByteArray = jobPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(jobPayloadByteArray);
String payloadHash =  Base64.getEncoder().encodeToString(digester.digest());
vars.put(&quot;jobPayload&quot;,jobPayload);

dPubKey=vars.get(&quot;devicePublicKey&quot;);

device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);

serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot; + &quot;\&quot;device_pub_key\&quot;&quot;+&quot;:&quot;+ &quot;\&quot;&quot; +dPubKey +&quot;\&quot;&quot;+&quot;,&quot;+&quot;\&quot;server_pub_key\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+serverPublicKey+&quot;\&quot;&quot;+&quot;,&quot;+&quot;\&quot;job_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ payloadHash+&quot;\&quot;&quot;+&quot;}&quot;;
vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.011) MPIPolicyOptions Status Dispatched Job" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;job&quot;:{&quot;job_payload&quot;:${jobPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/v1/jobs/${__V(jobId_${intCounter})}?auth_token=${DeviceToken}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${ip}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Expect</stringProp>
                          <stringProp name="Header.value">100-continue</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="MPIPolicyOptions finished_OS_Process_Sampler" enabled="true">
                    <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                    <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                    <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                    <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="SystemSampler.directory"></stringProp>
                  </SystemSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                      <boolProp name="resetInterpreter">true</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;

java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.43Z&quot;;

String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));

String endPointUid = vars.get(&quot;endpoint_uid&quot;);
String jobPayload = &quot;{\&quot;id\&quot;:&quot;+jobId+&quot;,\&quot;state\&quot;:\&quot;finished\&quot;,\&quot;result\&quot;:\&quot;success\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;

byte[] jobPayloadByteArray = jobPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(jobPayloadByteArray);
String payloadHash =  Base64.getEncoder().encodeToString(digester.digest());

vars.put(&quot;jobPayload&quot;,jobPayload);

dPubKey=vars.get(&quot;devicePublicKey&quot;);

device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);

serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot;+&quot;\&quot;job_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ payloadHash+&quot;\&quot;&quot;+&quot;}&quot;;

vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.012) MPIPolicyOptions Status Finished Job" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;job&quot;:{&quot;job_payload&quot;:${jobPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/v1/jobs/${__V(jobId_${intCounter})}?auth_token=${DeviceToken}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${ip}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Expect</stringProp>
                          <stringProp name="Header.value">100-continue</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">vars.put(&quot;jobType&quot;,&quot;&quot;);
vars.put(&quot;jobId&quot;,&quot;&quot;);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for SetSchedulerPolicy" enabled="true">
                  <stringProp name="IfController.condition">&quot;${__V(jobTypeExtracted_${intCounter})}&quot;==&quot;SetSchedulerPolicy&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="SetSchedulerPolicy Status Dispatched OS Process Sampler" enabled="true">
                    <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                    <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                    <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                    <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="SystemSampler.directory"></stringProp>
                  </SystemSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                      <boolProp name="resetInterpreter">true</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;

java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.03Z&quot;;

String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));

String endPointUid = vars.get(&quot;endpoint_uid&quot;);


String jobPayload=&quot;{\&quot;id\&quot;:&quot;+jobId+&quot;,\&quot;state\&quot;:\&quot;dispatched\&quot;,\&quot;result\&quot;:\&quot;\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
byte[] jobPayloadByteArray = jobPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(jobPayloadByteArray);
String payloadHash =  Base64.getEncoder().encodeToString(digester.digest());
vars.put(&quot;jobPayload&quot;,jobPayload);
dPubKey=vars.get(&quot;devicePublicKey&quot;);
device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);
serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot;+&quot;\&quot;job_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ payloadHash+&quot;\&quot;&quot;+&quot;}&quot;;
vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.013) SetSchedulerPolicy Status Dispatched Job" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;job&quot;:{&quot;job_payload&quot;:${jobPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/v1/jobs/${__V(jobId_${intCounter})}?auth_token=${DeviceToken}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${ip}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Expect</stringProp>
                          <stringProp name="Header.value">100-continue</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="SetSchedulerPolicy finished_OS_Process_Sampler" enabled="true">
                    <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                    <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                    <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                    <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="SystemSampler.directory"></stringProp>
                  </SystemSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                      <boolProp name="resetInterpreter">true</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;

java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.43Z&quot;;

String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));

String endPointUid = vars.get(&quot;endpoint_uid&quot;);

String jobPayload = &quot;{\&quot;id\&quot;:&quot;+jobId+&quot;,\&quot;state\&quot;:\&quot;finished\&quot;,\&quot;result\&quot;:\&quot;success\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;

byte[] jobPayloadByteArray = jobPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(jobPayloadByteArray);
String payloadHash =  Base64.getEncoder().encodeToString(digester.digest());

vars.put(&quot;jobPayload&quot;,jobPayload);

dPubKey=vars.get(&quot;devicePublicKey&quot;);

device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);

serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot;+&quot;\&quot;job_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ payloadHash+&quot;\&quot;&quot;+&quot;}&quot;;

vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.014) SetSchedulerPolicy Status Finished Job" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;job&quot;:{&quot;job_payload&quot;:${jobPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/v1/jobs/${__V(jobId_${intCounter})}?auth_token=${DeviceToken}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${ip}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Expect</stringProp>
                          <stringProp name="Header.value">100-continue</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">vars.put(&quot;jobType&quot;,&quot;&quot;);
vars.put(&quot;jobId&quot;,&quot;&quot;);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for ChangeFirewallPolicy" enabled="true">
                  <stringProp name="IfController.condition">&quot;${__V(jobTypeExtracted_${intCounter})}&quot;==&quot;ChangeFirewallPolicy&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="ChangeFirewallPolicy dispatched_OS_Process_Sampler" enabled="true">
                    <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                    <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                    <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                    <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="SystemSampler.directory"></stringProp>
                  </SystemSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                      <boolProp name="resetInterpreter">true</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;

java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.03Z&quot;;

String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));

String endPointUid = vars.get(&quot;endpoint_uid&quot;);


String jobPayload=&quot;{\&quot;id\&quot;:&quot;+jobId+&quot;,\&quot;state\&quot;:\&quot;dispatched\&quot;,\&quot;result\&quot;:\&quot;\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
byte[] jobPayloadByteArray = jobPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(jobPayloadByteArray);
String payloadHash =  Base64.getEncoder().encodeToString(digester.digest());

vars.put(&quot;jobPayload&quot;,jobPayload);
dPubKey=vars.get(&quot;devicePublicKey&quot;);
device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);
serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot;+&quot;\&quot;job_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ payloadHash+&quot;\&quot;&quot;+&quot;}&quot;;
vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.015) ChangeFirewallPolicy Status Dispatched Job" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;job&quot;:{&quot;job_payload&quot;:${jobPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/v1/jobs/${__V(jobId_${intCounter})}?auth_token=${DeviceToken}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${ip}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Expect</stringProp>
                          <stringProp name="Header.value">100-continue</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="ChangeFirewallPolicy finished_OS_Process_Sampler" enabled="true">
                    <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                    <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                    <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                    <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="SystemSampler.directory"></stringProp>
                  </SystemSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                      <boolProp name="resetInterpreter">true</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;

java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.43Z&quot;;

String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));

String endPointUid = vars.get(&quot;endpoint_uid&quot;);

String jobPayload = &quot;{\&quot;id\&quot;:&quot;+jobId+&quot;,\&quot;state\&quot;:\&quot;finished\&quot;,\&quot;result\&quot;:\&quot;{\\\&quot;success\\\&quot;:true}\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
byte[] jobPayloadByteArray = jobPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(jobPayloadByteArray);
String payloadHash =  Base64.getEncoder().encodeToString(digester.digest());
vars.put(&quot;jobPayload&quot;,jobPayload);

dPubKey=vars.get(&quot;devicePublicKey&quot;);
device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);

serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot;+&quot;\&quot;job_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ payloadHash+&quot;\&quot;&quot;+&quot;}&quot;;

vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.016) ChangeFirewallPolicy Status Finished Job" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;job&quot;:{&quot;job_payload&quot;:${jobPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/v1/jobs/${__V(jobId_${intCounter})}?auth_token=${DeviceToken}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${ip}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Expect</stringProp>
                          <stringProp name="Header.value">100-continue</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">vars.put(&quot;jobType&quot;,&quot;&quot;);
vars.put(&quot;jobId&quot;,&quot;&quot;);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for UpdateAntiVirus" enabled="true">
                  <stringProp name="IfController.condition">&quot;${__V(jobTypeExtracted_${intCounter})}&quot;==&quot;UpdateAntiVirus&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="UpdateAntiVirus dispatched_OS_Process_Sampler" enabled="true">
                    <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                    <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                    <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                    <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="SystemSampler.directory"></stringProp>
                  </SystemSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                      <boolProp name="resetInterpreter">true</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;

java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.03Z&quot;;

String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));

String endPointUid = vars.get(&quot;endpoint_uid&quot;);

String jobPayload=&quot;{\&quot;id\&quot;:&quot;+jobId+&quot;,\&quot;state\&quot;:\&quot;dispatched\&quot;,\&quot;result\&quot;:\&quot;\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
byte[] jobPayloadByteArray = jobPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(jobPayloadByteArray);
String payloadHash =  Base64.getEncoder().encodeToString(digester.digest());

vars.put(&quot;jobPayload&quot;,jobPayload);
dPubKey=vars.get(&quot;devicePublicKey&quot;);
device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);
serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot;+&quot;\&quot;job_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ payloadHash+&quot;\&quot;&quot;+&quot;}&quot;;
vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.017) UpdateAntiVirus Status Dispatched Job" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;job&quot;:{&quot;job_payload&quot;:${jobPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/v1/jobs/${__V(jobId_${intCounter})}?auth_token=${DeviceToken}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${ip}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Expect</stringProp>
                          <stringProp name="Header.value">100-continue</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="UpdateAntiVirus finished_OS_Process_Sampler" enabled="true">
                    <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                    <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                    <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                    <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="SystemSampler.directory"></stringProp>
                  </SystemSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                      <boolProp name="resetInterpreter">true</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;

java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.43Z&quot;;

String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));

String endPointUid = vars.get(&quot;endpoint_uid&quot;);

String jobPayload = &quot;{\&quot;id\&quot;:&quot;+jobId+&quot;,\&quot;state\&quot;:\&quot;finished\&quot;,\&quot;result\&quot;:\&quot;\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;

byte[] jobPayloadByteArray = jobPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(jobPayloadByteArray);
String payloadHash =  Base64.getEncoder().encodeToString(digester.digest());
vars.put(&quot;jobPayload&quot;,jobPayload);

dPubKey=vars.get(&quot;devicePublicKey&quot;);

device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);

serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot;+&quot;\&quot;job_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ payloadHash+&quot;\&quot;&quot;+&quot;}&quot;;

vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.018) UpdateAntiVirus Status Finished Job" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;job&quot;:{&quot;job_payload&quot;:${jobPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/v1/jobs/${__V(jobId_${intCounter})}?auth_token=${DeviceToken}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${ip}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Expect</stringProp>
                          <stringProp name="Header.value">100-continue</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">vars.put(&quot;jobType&quot;,&quot;&quot;);
vars.put(&quot;jobId&quot;,&quot;&quot;);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for GetSoftwareVersion" enabled="true">
                  <stringProp name="IfController.condition">&quot;${__V(jobTypeExtracted_${intCounter})}&quot;==&quot;GetSoftwareVersion&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="GetSoftwareVersion dispatched_OS_Process_Sampler" enabled="true">
                    <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                    <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                    <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                    <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="SystemSampler.directory"></stringProp>
                  </SystemSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                      <boolProp name="resetInterpreter">true</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;

java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.03Z&quot;;

String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));

String endPointUid = vars.get(&quot;endpoint_uid&quot;);


String jobPayload=&quot;{\&quot;id\&quot;:&quot;+jobId+&quot;,\&quot;state\&quot;:\&quot;dispatched\&quot;,\&quot;result\&quot;:\&quot;\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
byte[] jobPayloadByteArray = jobPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(jobPayloadByteArray);
String payloadHash =  Base64.getEncoder().encodeToString(digester.digest());

vars.put(&quot;jobPayload&quot;,jobPayload);

dPubKey=vars.get(&quot;devicePublicKey&quot;);

device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);

serverPublicKey = vars.get(&quot;server_pub_key&quot;);

String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot;+&quot;\&quot;job_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ payloadHash+&quot;\&quot;&quot;+&quot;}&quot;;

vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.019) GetSoftwareVersion Status Dispatched Job" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;job&quot;:{&quot;job_payload&quot;:${jobPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/v1/jobs/${__V(jobId_${intCounter})}?auth_token=${DeviceToken}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${ip}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Expect</stringProp>
                          <stringProp name="Header.value">100-continue</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="GetSoftwareVersion finished_OS_Process_Sampler" enabled="true">
                    <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                    <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                    <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                    <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="SystemSampler.directory"></stringProp>
                  </SystemSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                      <boolProp name="resetInterpreter">true</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;

java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.43Z&quot;;

String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));

String endPointUid = vars.get(&quot;endpoint_uid&quot;);


String softwareVersionResult = &quot;{\\\&quot;software_list\\\&quot;:[{\\\&quot;installed\\\&quot;:true,\\\&quot;installed_version\\\&quot;:\\\&quot;1.23.7.1\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;HP Touchpoint Manager Client\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Hewlett-Packard Company\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;_issuite_{24CB35EB-F445-4061-8C3A-67D5631996C5}\\\&quot;},{\\\&quot;installed\\\&quot;:false,\\\&quot;installed_version\\\&quot;:\\\&quot;\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;HP Touchpoint Manager Firewall Monitor\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Hewlett-Packard Company\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;{65F88F01-D51A-4F94-9138-37AC4756F686}\\\&quot;},{\\\&quot;installed\\\&quot;:false,\\\&quot;installed_version\\\&quot;:\\\&quot;\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;HP Touchpoint Manager System Health Manager\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Hewlett-Packard Company\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;{6441B86E-669F-4AFD-B707-2EF4D06CB15C}\\\&quot;},{\\\&quot;installed\\\&quot;:false,\\\&quot;installed_version\\\&quot;:\\\&quot;\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;HP Touchpoint Manager GeoSecurity\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Hewlett-Packard Company\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;{E22C6A30-E3B5-4889-BBE5-77D0304AE30F}\\\&quot;},{\\\&quot;installed\\\&quot;:true,\\\&quot;installed_version\\\&quot;:\\\&quot;8.3.39.21\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;HP Support Assistant\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Hewlett-Packard Company\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;{B4A46E3F-A5DF-4C68-8C38-88FD26F642BE}\\\&quot;},{\\\&quot;installed\\\&quot;:false,\\\&quot;installed_version\\\&quot;:\\\&quot;\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;HP Touchpoint Manager Patch Management\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Hewlett-Packard Company\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;{D1FB6814-C19E-42EA-B008-066977C4D04B}\\\&quot;},{\\\&quot;installed\\\&quot;:false,\\\&quot;installed_version\\\&quot;:\\\&quot;\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;HP Password Recovery\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Hewlett-Packard Company\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;{C74063EB-AD94-4E1B-8952-BDC26D3707AA}\\\&quot;},{\\\&quot;installed\\\&quot;:false,\\\&quot;installed_version\\\&quot;:\\\&quot;\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;HP Touchpoint Analytics Client \\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;HP Inc.\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;{E5FB98E0-0784-44F0-8CEC-95CD4690C43F}\\\&quot;}],\\\&quot;version\\\&quot;:1}&quot;;

String jobPayload = &quot;{\&quot;id\&quot;:&quot;+jobId+&quot;,\&quot;state\&quot;:\&quot;finished\&quot;,\&quot;result\&quot;:\&quot;&quot;+softwareVersionResult+&quot;\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;

byte[] jobPayloadByteArray = jobPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(jobPayloadByteArray);
String payloadHash =  Base64.getEncoder().encodeToString(digester.digest());

vars.put(&quot;jobPayload&quot;,jobPayload);

dPubKey=vars.get(&quot;devicePublicKey&quot;);

device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);

serverPublicKey = vars.get(&quot;server_pub_key&quot;);

String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot;+&quot;\&quot;job_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ payloadHash+&quot;\&quot;&quot;+&quot;}&quot;;

vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.020) GetSoftwareVersion Status Finished Job" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;job&quot;:{&quot;job_payload&quot;:${jobPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/v1/jobs/${__V(jobId_${intCounter})}?auth_token=${DeviceToken}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${ip}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Expect</stringProp>
                          <stringProp name="Header.value">100-continue</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">vars.put(&quot;jobType&quot;,&quot;&quot;);
vars.put(&quot;jobId&quot;,&quot;&quot;);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for InstallSoftware" enabled="true">
                  <stringProp name="IfController.condition">&quot;${__V(jobTypeExtracted_${intCounter})}&quot;==&quot;InstallSoftware&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="InstallSoftware dispatched_OS_Process_Sampler" enabled="true">
                    <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                    <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                    <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                    <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="SystemSampler.directory"></stringProp>
                  </SystemSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                      <boolProp name="resetInterpreter">true</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;

java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.03Z&quot;;

String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));

String endPointUid = vars.get(&quot;endpoint_uid&quot;);


String jobPayload=&quot;{\&quot;id\&quot;:&quot;+jobId+&quot;,\&quot;state\&quot;:\&quot;dispatched\&quot;,\&quot;result\&quot;:\&quot;\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
byte[] jobPayloadByteArray = jobPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(jobPayloadByteArray);
String payloadHash =  Base64.getEncoder().encodeToString(digester.digest());

vars.put(&quot;jobPayload&quot;,jobPayload);
dPubKey=vars.get(&quot;devicePublicKey&quot;);
device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);
serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot;+&quot;\&quot;job_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ payloadHash+&quot;\&quot;&quot;+&quot;}&quot;;
vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.021) InstallSoftware Status Dispatched Job" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;job&quot;:{&quot;job_payload&quot;:${jobPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/v1/jobs/${__V(jobId_${intCounter})}?auth_token=${DeviceToken}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${ip}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Expect</stringProp>
                          <stringProp name="Header.value">100-continue</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="InstallSoftware finished_OS_Process_Sampler" enabled="true">
                    <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                    <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                    <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                    <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="SystemSampler.directory"></stringProp>
                  </SystemSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                      <boolProp name="resetInterpreter">true</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;

java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.43Z&quot;;

String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));

String endPointUid = vars.get(&quot;endpoint_uid&quot;);

String jobPayload = &quot;{\&quot;id\&quot;:&quot;+jobId+&quot;,\&quot;state\&quot;:\&quot;finished\&quot;,\&quot;result\&quot;:\&quot;{\\\&quot;version\\\&quot;:1,\\\&quot;software_list\\\&quot;:[{\\\&quot;name\\\&quot;:\\\&quot;HP Touchpoint Manager GeoSecurity\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Hewlett-Packard Company\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;{E22C6A30-E3B5-4889-BBE5-77D0304AE30F}\\\&quot;,\\\&quot;install_result\\\&quot;:\\\&quot;SUCCESS\\\&quot;,\\\&quot;version\\\&quot;:\\\&quot;1.20.3.1\\\&quot;,\\\&quot;message\\\&quot;:\\\&quot;\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;HP Touchpoint Manager Firewall Monitor\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Hewlett-Packard Company\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;{65F88F01-D51A-4F94-9138-37AC4756F686}\\\&quot;,\\\&quot;install_result\\\&quot;:\\\&quot;SUCCESS\\\&quot;,\\\&quot;version\\\&quot;:\\\&quot;1.20.2.1\\\&quot;,\\\&quot;message\\\&quot;:\\\&quot;\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;HP Touchpoint Analytics Client \\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;HP Inc.\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;{E5FB98E0-0784-44F0-8CEC-95CD4690C43F}\\\&quot;,\\\&quot;install_result\\\&quot;:\\\&quot;SUCCESS\\\&quot;,\\\&quot;version\\\&quot;:\\\&quot;1.0.0.172\\\&quot;,\\\&quot;message\\\&quot;:\\\&quot;\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;HP Touchpoint Manager System Health Manager\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Hewlett-Packard Company\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;{6441B86E-669F-4AFD-B707-2EF4D06CB15C}\\\&quot;,\\\&quot;install_result\\\&quot;:\\\&quot;SUCCESS\\\&quot;,\\\&quot;version\\\&quot;:\\\&quot;1.20.8.1\\\&quot;,\\\&quot;message\\\&quot;:\\\&quot;\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;HP Touchpoint Manager Patch Management\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Hewlett-Packard Company\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;{D1FB6814-C19E-42EA-B008-066977C4D04B}\\\&quot;,\\\&quot;install_result\\\&quot;:\\\&quot;SUCCESS\\\&quot;,\\\&quot;version\\\&quot;:\\\&quot;1.20.7.1\\\&quot;,\\\&quot;message\\\&quot;:\\\&quot;\\\&quot;}]}\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
byte[] jobPayloadByteArray = jobPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(jobPayloadByteArray);
String payloadHash =  Base64.getEncoder().encodeToString(digester.digest());

vars.put(&quot;jobPayload&quot;,jobPayload);

dPubKey=vars.get(&quot;devicePublicKey&quot;);

device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);

serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot;+&quot;\&quot;job_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ payloadHash+&quot;\&quot;&quot;+&quot;}&quot;;

vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.022) InstallSoftware Status Finished Job" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;job&quot;:{&quot;job_payload&quot;:${jobPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/v1/jobs/${__V(jobId_${intCounter})}?auth_token=${DeviceToken}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${ip}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Expect</stringProp>
                          <stringProp name="Header.value">100-continue</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">vars.put(&quot;jobType&quot;,&quot;&quot;);
vars.put(&quot;jobId&quot;,&quot;&quot;);
vars.put(&quot;installSoftwareJob&quot;,&quot;complete&quot;);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Request Location Policy Event" enabled="true"/>
                  <hashTree>
                    <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Request Location Policy Event OS Process Sampler" enabled="true">
                      <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                      <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                      <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                      <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${filename}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${deviceId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="SystemSampler.directory"></stringProp>
                    </SystemSampler>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                        <boolProp name="resetInterpreter">true</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;
java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.03Z&quot;;
String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));
String endPointUid = vars.get(&quot;deviceId&quot;);
String eventPayload =&quot;{\&quot;event_type\&quot;:\&quot;RequestLocationPolicy\&quot;,\&quot;payload\&quot;:\&quot;\&quot;,\&quot;severity\&quot;:\&quot;info\&quot;,\&quot;service_key\&quot;:\&quot;geoSecurity_hp_1.0\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
byte[] eventPayloadByteArray = eventPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(eventPayloadByteArray);
String eventPayloadHash =  Base64.getEncoder().encodeToString(digester.digest());
vars.put(&quot;eventPayload&quot;,eventPayload);
dPubKey=vars.get(&quot;devicePublicKey&quot;);
device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);
serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot; + &quot;\&quot;device_pub_key\&quot;&quot;+&quot;:&quot;+ &quot;\&quot;&quot; +dPubKey +&quot;\&quot;&quot;+&quot;,&quot;+&quot;\&quot;event_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ eventPayloadHash+&quot;\&quot;&quot;+&quot;}&quot;;
vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.023) Request Location Event" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;event&quot;:{&quot;event_payload&quot;:${eventPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/api/v1/events?auth_token=${DeviceToken}</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${ip}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Expect</stringProp>
                            <stringProp name="Header.value">100-continue</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value">keep-alive</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Bitlocker Status Event" enabled="true"/>
                  <hashTree>
                    <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Bitlocker Status Event OS Process Sampler" enabled="true">
                      <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                      <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                      <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                      <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${filename}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${deviceId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="SystemSampler.directory"></stringProp>
                    </SystemSampler>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                        <boolProp name="resetInterpreter">true</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;
java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.03Z&quot;;
String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));
String endPointUid = vars.get(&quot;deviceId&quot;);
String eventPayload =&quot;{\&quot;event_type\&quot;:\&quot;bitlocker-status-event\&quot;,\&quot;payload\&quot;:\&quot;{\\\&quot;os_drive\\\&quot;:{\\\&quot;encryption_method\\\&quot;:0,\\\&quot;protection_status\\\&quot;:0}}\&quot;,\&quot;severity\&quot;:\&quot;info\&quot;,\&quot;service_key\&quot;:\&quot;geoSecurity_hp_1.0\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
byte[] eventPayloadByteArray = eventPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(eventPayloadByteArray);
String eventPayloadHash =  Base64.getEncoder().encodeToString(digester.digest());
vars.put(&quot;eventPayload&quot;,eventPayload);
dPubKey=vars.get(&quot;devicePublicKey&quot;);
device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);
serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot; + &quot;\&quot;device_pub_key\&quot;&quot;+&quot;:&quot;+ &quot;\&quot;&quot; +dPubKey +&quot;\&quot;&quot;+&quot;,&quot;+&quot;\&quot;event_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ eventPayloadHash+&quot;\&quot;&quot;+&quot;}&quot;;
vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.024) Bitlocker Status Event" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;event&quot;:{&quot;event_payload&quot;:${eventPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/api/v1/events?auth_token=${DeviceToken}</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${ip}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Expect</stringProp>
                            <stringProp name="Header.value">100-continue</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value">keep-alive</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Battery Event" enabled="true"/>
                  <hashTree>
                    <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Battery Event OS Process Sampler" enabled="true">
                      <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                      <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                      <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                      <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${filename}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${deviceId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="SystemSampler.directory"></stringProp>
                    </SystemSampler>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                        <boolProp name="resetInterpreter">true</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;
java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.03Z&quot;;
String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));
String endPointUid = vars.get(&quot;deviceId&quot;);
String eventPayload =&quot;{\&quot;event_type\&quot;:\&quot;BatteryEvent\&quot;,\&quot;payload\&quot;:\&quot;{\\\&quot;Version\\\&quot;:\\\&quot;1.0\\\&quot;,\\\&quot;SystemID\\\&quot;:\\\&quot;807C\\\&quot;,\\\&quot;IsHpSystem\\\&quot;:\\\&quot;Y\\\&quot;,\\\&quot;BatteryList\\\&quot;:[{\\\&quot;BatteryDeviceName\\\&quot;:\\\&quot;Primary\\\&quot;,\\\&quot;SerialNumber\\\&quot;:\\\&quot;41321 2015/08/21\\\&quot;,\\\&quot;ExpectedLifeHealthPercentage\\\&quot;:\\\&quot;100\\\&quot;,\\\&quot;ExpectedLifeHealthStatus\\\&quot;:\\\&quot;1\\\&quot;,\\\&quot;BatteryCheckResult\\\&quot;:\\\&quot;255\\\&quot;,\\\&quot;HPBCInWarranty\\\&quot;:\\\&quot;\\\&quot;,\\\&quot;HPBCFailureId\\\&quot;:\\\&quot;\\\&quot;}]}\&quot;,\&quot;severity\&quot;:\&quot;info\&quot;,\&quot;service_key\&quot;:\&quot;systemHealthManager_hp_1.0\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
byte[] eventPayloadByteArray = eventPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(eventPayloadByteArray);
String eventPayloadHash =  Base64.getEncoder().encodeToString(digester.digest());
vars.put(&quot;eventPayload&quot;,eventPayload);
dPubKey=vars.get(&quot;devicePublicKey&quot;);
device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);
serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot; + &quot;\&quot;device_pub_key\&quot;&quot;+&quot;:&quot;+ &quot;\&quot;&quot; +dPubKey +&quot;\&quot;&quot;+&quot;,&quot;+&quot;\&quot;event_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ eventPayloadHash+&quot;\&quot;&quot;+&quot;}&quot;;
vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.025) Battery Event" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;event&quot;:{&quot;event_payload&quot;:${eventPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/api/v1/events?auth_token=${DeviceToken}</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${ip}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Expect</stringProp>
                            <stringProp name="Header.value">100-continue</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value">keep-alive</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="HDD Event" enabled="true"/>
                  <hashTree>
                    <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="HDD Event OS Process Sampler" enabled="true">
                      <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                      <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                      <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                      <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${filename}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${deviceId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="SystemSampler.directory"></stringProp>
                    </SystemSampler>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                        <boolProp name="resetInterpreter">true</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;
java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.03Z&quot;;
String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));
String endPointUid = vars.get(&quot;deviceId&quot;);
//String eventPayload =&quot;{\&quot;event_type\&quot;:\&quot;BatteryEvent\&quot;,\&quot;{\\\&quot;Version\\\&quot;:\\\&quot;1.0\\\&quot;,\\\&quot;SystemID\\\&quot;:\\\&quot;807C\\\&quot;,\\\&quot;IsHpSystem\\\&quot;:\\\&quot;Y\\\&quot;,\\\&quot;BatteryList\\\&quot;:[{\\\&quot;BatteryDeviceName\\\&quot;:\\\&quot;Primary\\\&quot;,\\\&quot;SerialNumber\\\&quot;:\\\&quot;41321 2015/08/21\\\&quot;,\\\&quot;ExpectedLifeHealthPercentage\\\&quot;:\\\&quot;100\\\&quot;,\\\&quot;ExpectedLifeHealthStatus\\\&quot;:\\\&quot;1\\\&quot;,\\\&quot;BatteryCheckResult\\\&quot;:\\\&quot;255\\\&quot;,\\\&quot;HPBCInWarranty\\\&quot;:\\\&quot;\\\&quot;,\\\&quot;HPBCFailureId\\\&quot;:\\\&quot;\\\&quot;}]}\&quot;,\&quot;severity\&quot;:\&quot;info\&quot;,\&quot;service_key\&quot;:\&quot;systemHealthManager_hp_1.0\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;

String eventPayload =&quot;{\&quot;event_type\&quot;:\&quot;HDDEvent\&quot;,\&quot;payload\&quot;:\&quot;{\\\&quot;Version\\\&quot;:\\\&quot;1.0\\\&quot;,\\\&quot;SystemID\\\&quot;:\\\&quot;807C\\\&quot;,\\\&quot;IsHpSystem\\\&quot;:\\\&quot;Y\\\&quot;,\\\&quot;HardDriveList\\\&quot;:[{\\\&quot;Status\\\&quot;:\\\&quot;OK\\\&quot;,\\\&quot;EventType\\\&quot;:\\\&quot;1\\\&quot;,\\\&quot;Model\\\&quot;:\\\&quot;INTEL SSDSCKJF180A5H REF\\\&quot;,\\\&quot;SerialNumber\\\&quot;:\\\&quot;CVTQ5306016B180A\\\&quot;,\\\&quot;OriginalSize\\\&quot;:\\\&quot;180043153920\\\&quot;,\\\&quot;FreeSpace\\\&quot;:\\\&quot;127053512704\\\&quot;,\\\&quot;AllocatedSize\\\&quot;:\\\&quot;179451195392\\\&quot;,\\\&quot;Removable\\\&quot;:\\\&quot;No\\\&quot;}]}\&quot;,\&quot;severity\&quot;:\&quot;info\&quot;,\&quot;service_key\&quot;:\&quot;systemHealthManager_hp_1.0\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
byte[] eventPayloadByteArray = eventPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(eventPayloadByteArray);
String eventPayloadHash =  Base64.getEncoder().encodeToString(digester.digest());
vars.put(&quot;eventPayload&quot;,eventPayload);
dPubKey=vars.get(&quot;devicePublicKey&quot;);
device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);
serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot; + &quot;\&quot;device_pub_key\&quot;&quot;+&quot;:&quot;+ &quot;\&quot;&quot; +dPubKey +&quot;\&quot;&quot;+&quot;,&quot;+&quot;\&quot;event_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ eventPayloadHash+&quot;\&quot;&quot;+&quot;}&quot;;
vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.026) HDD Event" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;event&quot;:{&quot;event_payload&quot;:${eventPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/api/v1/events?auth_token=${DeviceToken}</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${ip}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Expect</stringProp>
                            <stringProp name="Header.value">100-continue</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value">keep-alive</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Anti-virus State Changed Event" enabled="true"/>
                  <hashTree>
                    <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Anti-virus state changed OS Process Sampler" enabled="true">
                      <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                      <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                      <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                      <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${filename}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${deviceId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="SystemSampler.directory"></stringProp>
                    </SystemSampler>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                        <boolProp name="resetInterpreter">true</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;
java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.03Z&quot;;
String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));
String endPointUid = vars.get(&quot;deviceId&quot;);
String eventPayload =&quot;{\&quot;event_type\&quot;:\&quot;AntiVirusStateChanged\&quot;,\&quot;payload\&quot;:\&quot;{\\\&quot;state\\\&quot;:\\\&quot;enabled\\\&quot;,\\\&quot;providers\\\&quot;:[{\\\&quot;name\\\&quot;:\\\&quot;Windows Defender\\\&quot;,\\\&quot;raw_state\\\&quot;:\\\&quot;397568\\\&quot;,\\\&quot;state\\\&quot;:\\\&quot;enabled\\\&quot;}],\\\&quot;remediation_attempted\\\&quot;:false}\&quot;,\&quot;severity\&quot;:\&quot;info\&quot;,\&quot;service_key\&quot;:\&quot;deviceProtection_hp_1.0\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
byte[] eventPayloadByteArray = eventPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(eventPayloadByteArray);
String eventPayloadHash =  Base64.getEncoder().encodeToString(digester.digest());
vars.put(&quot;eventPayload&quot;,eventPayload);
dPubKey=vars.get(&quot;devicePublicKey&quot;);
device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);
serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot; + &quot;\&quot;device_pub_key\&quot;&quot;+&quot;:&quot;+ &quot;\&quot;&quot; +dPubKey +&quot;\&quot;&quot;+&quot;,&quot;+&quot;\&quot;event_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ eventPayloadHash+&quot;\&quot;&quot;+&quot;}&quot;;
vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.027) Anti-virus State Changed Event" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;event&quot;:{&quot;event_payload&quot;:${eventPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/api/v1/events?auth_token=${DeviceToken}</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${ip}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Expect</stringProp>
                            <stringProp name="Header.value">100-continue</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value">keep-alive</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Firewall State Changed Event" enabled="true"/>
                  <hashTree>
                    <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Firewall State Changed OS Process Sampler" enabled="true">
                      <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                      <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                      <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                      <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${filename}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${deviceId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="SystemSampler.directory"></stringProp>
                    </SystemSampler>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                        <boolProp name="resetInterpreter">true</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;
java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.03Z&quot;;
String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));
String endPointUid = vars.get(&quot;deviceId&quot;);
String eventPayload =&quot;{\&quot;event_type\&quot;:\&quot;FirewallStateChanged\&quot;,\&quot;payload\&quot;:\&quot;{\\\&quot;state\\\&quot;:\\\&quot;enabled\\\&quot;,\\\&quot;providers\\\&quot;:[{\\\&quot;name\\\&quot;:\\\&quot;Windows Firewall\\\&quot;,\\\&quot;raw_state\\\&quot;:\\\&quot;69632\\\&quot;,\\\&quot;state\\\&quot;:\\\&quot;enabled\\\&quot;}],\\\&quot;domain\\\&quot;:true,\\\&quot;private\\\&quot;:true,\\\&quot;public\\\&quot;:true,\\\&quot;remediation_attempted\\\&quot;:false}\&quot;,\&quot;severity\&quot;:\&quot;info\&quot;,\&quot;service_key\&quot;:\&quot;deviceProtection_hp_1.0\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
byte[] eventPayloadByteArray = eventPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(eventPayloadByteArray);
String eventPayloadHash =  Base64.getEncoder().encodeToString(digester.digest());
vars.put(&quot;eventPayload&quot;,eventPayload);
dPubKey=vars.get(&quot;devicePublicKey&quot;);
device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);
serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot; + &quot;\&quot;device_pub_key\&quot;&quot;+&quot;:&quot;+ &quot;\&quot;&quot; +dPubKey +&quot;\&quot;&quot;+&quot;,&quot;+&quot;\&quot;event_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ eventPayloadHash+&quot;\&quot;&quot;+&quot;}&quot;;
vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.028) Firewall State Changed Event" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;event&quot;:{&quot;event_payload&quot;:${eventPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/api/v1/events?auth_token=${DeviceToken}</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${ip}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Expect</stringProp>
                            <stringProp name="Header.value">100-continue</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value">keep-alive</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Announce Inventory Changed Event" enabled="true"/>
                  <hashTree>
                    <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Announce Inventory Changed OS Process Sampler" enabled="true">
                      <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                      <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                      <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                      <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${filename}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${deviceId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="SystemSampler.directory"></stringProp>
                    </SystemSampler>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                        <boolProp name="resetInterpreter">true</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;
java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.03Z&quot;;
String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));
String endPointUid = vars.get(&quot;deviceId&quot;);
String eventPayload =&quot;{\&quot;event_type\&quot;:\&quot;announce-inventory-changed\&quot;,\&quot;payload\&quot;:\&quot;[{\\\&quot;id\\\&quot;:\\\&quot;{AC76BA86-7AD7-1033-7B44-AC0F074E4100}\\\&quot;,\\\&quot;install_date\\\&quot;:\\\&quot;2017-08-23\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;Adobe Acrobat Reader DC\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Adobe Systems Incorporated\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;sw-win-d\\\&quot;,\\\&quot;version\\\&quot;:\\\&quot;17.012.20095\\\&quot;},{\\\&quot;id\\\&quot;:\\\&quot;Google Chrome\\\&quot;,\\\&quot;install_date\\\&quot;:\\\&quot;2017-04-21\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;Google Chrome\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Google Inc.\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;sw-win-d\\\&quot;,\\\&quot;version\\\&quot;:\\\&quot;60.0.3112.101\\\&quot;},{\\\&quot;id\\\&quot;:\\\&quot;{24CB35EB-F445-4061-8C3A-67D5631996C5}\\\&quot;,\\\&quot;install_date\\\&quot;:\\\&quot;2017-08-23\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;HP Managed Services\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;HP Inc.\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;sw-win-d\\\&quot;,\\\&quot;version\\\&quot;:\\\&quot;2.0.6.1\\\&quot;},{\\\&quot;id\\\&quot;:\\\&quot;{30514137-FB26-4E1A-A3B4-5B48680F3ECE}\\\&quot;,\\\&quot;install_date\\\&quot;:\\\&quot;2017-04-21\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;HP Support Assistant\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;HP Inc.\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;sw-win-d\\\&quot;,\\\&quot;version\\\&quot;:\\\&quot;8.4.19.3\\\&quot;}]\&quot;,\&quot;severity\&quot;:\&quot;info\&quot;,\&quot;service_key\&quot;:\&quot;/com.hp/swinv/app-inventory/v1\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;

byte[] eventPayloadByteArray = eventPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(eventPayloadByteArray);
String eventPayloadHash =  Base64.getEncoder().encodeToString(digester.digest());
vars.put(&quot;eventPayload&quot;,eventPayload);
dPubKey=vars.get(&quot;devicePublicKey&quot;);
device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);
serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot; + &quot;\&quot;device_pub_key\&quot;&quot;+&quot;:&quot;+ &quot;\&quot;&quot; +dPubKey +&quot;\&quot;&quot;+&quot;,&quot;+&quot;\&quot;event_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ eventPayloadHash+&quot;\&quot;&quot;+&quot;}&quot;;
vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.029) Announce Inventory Changed Event" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;event&quot;:{&quot;event_payload&quot;:${eventPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/api/v1/events?auth_token=${DeviceToken}</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${ip}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Expect</stringProp>
                            <stringProp name="Header.value">100-continue</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value">keep-alive</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Announce Store Inventory Changed Event" enabled="true"/>
                  <hashTree>
                    <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Announce Store Inventory Changed OS Process Sampler" enabled="true">
                      <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                      <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                      <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                      <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${filename}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${deviceId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="SystemSampler.directory"></stringProp>
                    </SystemSampler>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                        <boolProp name="resetInterpreter">true</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;
java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.03Z&quot;;
String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));
String endPointUid = vars.get(&quot;deviceId&quot;);
String eventPayload =&quot;{\&quot;event_type\&quot;:\&quot;announce-store-inventory-changed\&quot;,\&quot;payload\&quot;:\&quot;[{\\\&quot;id\\\&quot;:\\\&quot;king.com.CandyCrushSodaSaga_kgqvnymyfvs32\\\&quot;,\\\&quot;install_date\\\&quot;:\\\&quot;2017-08-12\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;Candy Crush Soda Saga\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;king.com\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;sw-win-m\\\&quot;,\\\&quot;version\\\&quot;:\\\&quot;1.93.1401.0\\\&quot;},{\\\&quot;id\\\&quot;:\\\&quot;Facebook.Facebook_8xx8rvfyw5nnt\\\&quot;,\\\&quot;install_date\\\&quot;:\\\&quot;2017-06-24\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;Facebook\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Facebook Inc\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;sw-win-m\\\&quot;,\\\&quot;version\\\&quot;:\\\&quot;93.955.37739.0\\\&quot;},{\\\&quot;id\\\&quot;:\\\&quot;Microsoft.MicrosoftSolitaireCollection_8wekyb3d8bbwe\\\&quot;,\\\&quot;install_date\\\&quot;:\\\&quot;2017-05-27\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;Microsoft Solitaire Collection\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Microsoft Studios\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;sw-win-m\\\&quot;,\\\&quot;version\\\&quot;:\\\&quot;3.16.5170.0\\\&quot;}]\&quot;,\&quot;severity\&quot;:\&quot;info\&quot;,\&quot;service_key\&quot;:\&quot;/com.hp/swinv/store-app-inventory/v1\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;

byte[] eventPayloadByteArray = eventPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(eventPayloadByteArray);
String eventPayloadHash =  Base64.getEncoder().encodeToString(digester.digest());
vars.put(&quot;eventPayload&quot;,eventPayload);
dPubKey=vars.get(&quot;devicePublicKey&quot;);
device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);
serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot; + &quot;\&quot;device_pub_key\&quot;&quot;+&quot;:&quot;+ &quot;\&quot;&quot; +dPubKey +&quot;\&quot;&quot;+&quot;,&quot;+&quot;\&quot;event_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ eventPayloadHash+&quot;\&quot;&quot;+&quot;}&quot;;
vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.030) Announce Store Inventory Changed Event" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;event&quot;:{&quot;event_payload&quot;:${eventPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/api/v1/events?auth_token=${DeviceToken}</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${ip}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Expect</stringProp>
                            <stringProp name="Header.value">100-continue</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value">keep-alive</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for ScanForPatches" enabled="true">
                  <stringProp name="IfController.condition">(&quot;${__V(jobTypeExtracted_${intCounter})}&quot;==&quot;ScanForPatches&quot;) &amp;&amp; (&quot;${installSoftwareJob}&quot;==&quot;complete&quot;)</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="ScanForPatches dispatched_OS_Process_Sampler" enabled="true">
                    <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                    <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                    <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                    <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="SystemSampler.directory"></stringProp>
                  </SystemSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                      <boolProp name="resetInterpreter">true</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;

java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.03Z&quot;;

String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));

String endPointUid = vars.get(&quot;endpoint_uid&quot;);


String jobPayload=&quot;{\&quot;id\&quot;:&quot;+jobId+&quot;,\&quot;state\&quot;:\&quot;dispatched\&quot;,\&quot;result\&quot;:\&quot;\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
byte[] jobPayloadByteArray = jobPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(jobPayloadByteArray);
String payloadHash =  Base64.getEncoder().encodeToString(digester.digest());
vars.put(&quot;jobPayload&quot;,jobPayload);
dPubKey=vars.get(&quot;devicePublicKey&quot;);
device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);
serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot;+&quot;\&quot;job_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ payloadHash+&quot;\&quot;&quot;+&quot;}&quot;;
vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.031) ScanForPatches Status Dispatched Job" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;job&quot;:{&quot;job_payload&quot;:${jobPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/v1/jobs/${__V(jobId_${intCounter})}?auth_token=${DeviceToken}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${ip}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Expect</stringProp>
                          <stringProp name="Header.value">100-continue</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="ScanForPatches finished_OS_Process_Sampler" enabled="true">
                    <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                    <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                    <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                    <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="SystemSampler.directory"></stringProp>
                  </SystemSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                      <boolProp name="resetInterpreter">true</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;

java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.43Z&quot;;

String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));

String endPointUid = vars.get(&quot;endpoint_uid&quot;);


String jobPayload = &quot;{\&quot;id\&quot;:&quot;+jobId+&quot;,\&quot;state\&quot;:\&quot;finished\&quot;,\&quot;result\&quot;:\&quot;\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;

byte[] jobPayloadByteArray = jobPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(jobPayloadByteArray);
String payloadHash =  Base64.getEncoder().encodeToString(digester.digest());
vars.put(&quot;jobPayload&quot;,jobPayload);

dPubKey=vars.get(&quot;devicePublicKey&quot;);

device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);

serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot;+&quot;\&quot;job_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ payloadHash+&quot;\&quot;&quot;+&quot;}&quot;;

vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.032) ScanForPatches Status Finished Job" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;job&quot;:{&quot;job_payload&quot;:${jobPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/v1/jobs/${__V(jobId_${intCounter})}?auth_token=${DeviceToken}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${ip}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Expect</stringProp>
                          <stringProp name="Header.value">100-continue</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">vars.put(&quot;jobType&quot;,&quot;&quot;);
vars.put(&quot;jobId&quot;,&quot;&quot;);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Scan Result Events" enabled="true"/>
                  <hashTree>
                    <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Scan Result Event OS Process Sampler" enabled="true">
                      <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                      <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                      <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                      <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${filename}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Argument">
                            <stringProp name="Argument.name"></stringProp>
                            <stringProp name="Argument.value">${deviceId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="SystemSampler.directory"></stringProp>
                    </SystemSampler>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                        <boolProp name="resetInterpreter">true</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;
java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.03Z&quot;;
String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));
String endPointUid = vars.get(&quot;deviceId&quot;);
String eventPayload =&quot;{\&quot;event_type\&quot;:\&quot;ScanResult\&quot;,\&quot;payload\&quot;:\&quot;[{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MSWU-2125\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;windows10.0-TH2-kb3150513-x64.msu\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Windows 10 Enterprise (x64)\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;1511\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;0\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MS17-08-AFP\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;windows10.0-kb4034662-x64-TH2.msu\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Windows 10 Enterprise (x64)\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;1511\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;1\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MS17-08-W10\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;windows10.0-kb4034660-x64-TH2.msu\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Windows 10 Enterprise (x64)\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;1511\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;1\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MSNS17-08-4035632\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;windows10.0-kb4035632-x64-TH2.msu\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Windows 10 Enterprise (x64)\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;1511\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;1\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MSWU-1461\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;outlfltr2013-kb3055013-fullfile-x86-glb.exe\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Microsoft Office Professional Plus 2013\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;SP1\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;0\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MSWU-1620\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;outexum2013-kb3101487-fullfile-x86-glb.exe\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Microsoft Office Professional Plus 2013\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;SP1\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;1\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MSWU-2094\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;outlfltr2013-kb3115404-fullfile-x86-glb.exe\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Microsoft Office Professional Plus 2013\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;SP1\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;0\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MSWU-2218\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;publisher2013-kb3114329-fullfile-x86-glb.exe\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Microsoft Office Professional Plus 2013\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;SP1\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;1\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MSWU-2266\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;access2013-kb3118349-fullfile-x86-glb.exe\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Microsoft Office Professional Plus 2013\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;SP1\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;1\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MSWU-2314\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;groove2013-kb3178645-fullfile-x86-glb.exe\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Microsoft Office Professional Plus 2013\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;SP1\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;1\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MSNS17-08-4011080\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;excel2013-kb4011080-fullfile-x86-glb.exe\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Microsoft Office Professional Plus 2013\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;SP1\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;1\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MSNS17-08-4011046\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;lync2013-kb4011046-fullfile-x86-glb.exe\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Microsoft Office Professional Plus 2013\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;SP1\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;1\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MSNS17-08-4011070\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;mso2013-kb4011070-fullfile-x86-glb.exe\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Microsoft Office Professional Plus 2013\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;SP1\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;1\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MSNS17-08-4011077\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;osfclient2013-kb4011077-fullfile-x86-glb.exe\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Microsoft Office Professional Plus 2013\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;SP1\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;1\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MSNS17-08-3172443\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;vbe72013-kb3172443-fullfile-x86-glb.exe\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Microsoft Office Professional Plus 2013\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;SP1\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;1\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MSNS17-08-4011045\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;word2013-kb4011045-fullfile-x86-glb.exe\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Microsoft Office Professional Plus 2013\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;SP1\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;1\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MSWU-1461\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;outlfltr2013-kb3055013-fullfile-x86-glb.exe\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Microsoft Office InfoPath 2013\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;SP1\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;0\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MSWU-2314\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;groove2013-kb3178645-fullfile-x86-glb.exe\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Microsoft Office 64-bit Components 2013\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;SP1\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;1\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MSNS17-08-4011046\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;lync2013-kb4011046-fullfile-x86-glb.exe\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Microsoft Office 64-bit Components 2013\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;SP1\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;1\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MSNS17-08-4011084\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;project2013-kb4011084-fullfile-x86-glb.exe\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Microsoft Office 64-bit Components 2013\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;SP1\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;1\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MSFT-DN13\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;NDP462-KB3151800-x86-x64-AllOS-ENU.exe\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;.NET Framework 4.6.1 (x64) (10.0)\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;Gold\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;0\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;MSWU-1524\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;vstor_redist_2525428.exe\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Microsoft Visual Studio Tools for Office\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;Gold\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;1\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;7ZIP-009\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;7z1604-x64.msi\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;7-Zip 16 x64\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;Gold\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;0\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;NPPP-075\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;npp.7.5.Installer.x64.exe\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Notepad++ 7 x64\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;Gold\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;0\\\&quot;},{\\\&quot;bulletin_id\\\&quot;:\\\&quot;TOMCAT-089\\\&quot;,\\\&quot;patch_name\\\&quot;:\\\&quot;apache-tomcat-8.0.45.exe\\\&quot;,\\\&quot;product_name\\\&quot;:\\\&quot;Apache Tomcat 8\\\&quot;,\\\&quot;service_pack\\\&quot;:\\\&quot;Gold\\\&quot;,\\\&quot;severity\\\&quot;:\\\&quot;0\\\&quot;}]\&quot;,\&quot;severity\&quot;:\&quot;info\&quot;,\&quot;service_key\&quot;:\&quot;/com.hp/patches/shavlik/v1\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
byte[] eventPayloadByteArray = eventPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(eventPayloadByteArray);
String eventPayloadHash =  Base64.getEncoder().encodeToString(digester.digest());
vars.put(&quot;eventPayload&quot;,eventPayload);
dPubKey=vars.get(&quot;devicePublicKey&quot;);
device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);
serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot; + &quot;\&quot;device_pub_key\&quot;&quot;+&quot;:&quot;+ &quot;\&quot;&quot; +dPubKey +&quot;\&quot;&quot;+&quot;,&quot;+&quot;\&quot;event_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ eventPayloadHash+&quot;\&quot;&quot;+&quot;}&quot;;
vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.033) Scan Result Event" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;event&quot;:{&quot;event_payload&quot;:${eventPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/api/v1/events?auth_token=${DeviceToken}</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Host</stringProp>
                            <stringProp name="Header.value">${ip}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Expect</stringProp>
                            <stringProp name="Header.value">100-continue</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Connection</stringProp>
                            <stringProp name="Header.value">keep-alive</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for cmd-install-application-catalog" enabled="true">
                  <stringProp name="IfController.condition">&quot;${__V(jobTypeExtracted_${intCounter})}&quot;==&quot;cmd-install-application-catalog&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="cmd-install-application-catalog dispatched_OS_Process_Sampler" enabled="true">
                    <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                    <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                    <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                    <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="SystemSampler.directory"></stringProp>
                  </SystemSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                      <boolProp name="resetInterpreter">true</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;

java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.03Z&quot;;

String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));

String endPointUid = vars.get(&quot;endpoint_uid&quot;);


String jobPayload=&quot;{\&quot;id\&quot;:&quot;+jobId+&quot;,\&quot;state\&quot;:\&quot;dispatched\&quot;,\&quot;result\&quot;:\&quot;\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
byte[] jobPayloadByteArray = jobPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(jobPayloadByteArray);
String payloadHash =  Base64.getEncoder().encodeToString(digester.digest());

vars.put(&quot;jobPayload&quot;,jobPayload);
dPubKey=vars.get(&quot;devicePublicKey&quot;);
device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);
serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot;+&quot;\&quot;job_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ payloadHash+&quot;\&quot;&quot;+&quot;}&quot;;
vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.034) cmd-install-application-catalog Status Dispatched Job" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;job&quot;:{&quot;job_payload&quot;:${jobPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/v1/jobs/${__V(jobId_${intCounter})}?auth_token=${DeviceToken}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${ip}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Expect</stringProp>
                          <stringProp name="Header.value">100-continue</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="cmd-install-application-catalog finished_OS_Process_Sampler" enabled="true">
                    <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                    <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                    <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                    <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="SystemSampler.directory"></stringProp>
                  </SystemSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                      <boolProp name="resetInterpreter">true</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;

java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.43Z&quot;;

String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));

String endPointUid = vars.get(&quot;endpoint_uid&quot;);

String jobPayload = &quot;{\&quot;id\&quot;:&quot;+jobId+&quot;,\&quot;state\&quot;:\&quot;finished\&quot;,\&quot;result\&quot;:\&quot;{\\\&quot;parameters\\\&quot;:\\\&quot;{\\\\\\\&quot;apps\\\\\\\&quot;:[{\\\\\\\&quot;id\\\\\\\&quot;:\\\\\\\&quot;Facebook.Facebook_8xx8rvfyw5nnt\\\\\\\&quot;,\\\\\\\&quot;install-time\\\\\\\&quot;:\\\\\\\&quot;\\\\\\\&quot;,\\\\\\\&quot;return-code\\\\\\\&quot;:0,\\\\\\\&quot;status\\\\\\\&quot;:\\\\\\\&quot;NOT_INSTALLED\\\\\\\&quot;}],\\\\\\\&quot;mode\\\\\\\&quot;:\\\\\\\&quot;APPLY\\\\\\\&quot;}\\\&quot;,\\\&quot;success\\\&quot;:true}\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
//System.out.println(&quot;Job Payload: &quot;+jobPayload);
byte[] jobPayloadByteArray = jobPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(jobPayloadByteArray);
String payloadHash =  Base64.getEncoder().encodeToString(digester.digest());
vars.put(&quot;jobPayload&quot;,jobPayload);

dPubKey=vars.get(&quot;devicePublicKey&quot;);

device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);

serverPublicKey = vars.get(&quot;server_pub_key&quot;);

String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot;+&quot;\&quot;job_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ payloadHash+&quot;\&quot;&quot;+&quot;}&quot;;

vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.035) cmd-install-application-catalog Status Finished Job" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;job&quot;:{&quot;job_payload&quot;:${jobPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/v1/jobs/${__V(jobId_${intCounter})}?auth_token=${DeviceToken}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${ip}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Expect</stringProp>
                          <stringProp name="Header.value">100-continue</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">vars.put(&quot;jobType&quot;,&quot;&quot;);
vars.put(&quot;jobId&quot;,&quot;&quot;);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for cmd-install-binary-app-catalog" enabled="true">
                  <stringProp name="IfController.condition">&quot;${__V(jobTypeExtracted_${intCounter})}&quot;==&quot;cmd-install-binary-app-catalog&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="cmd-install-binary-app-catalog dispatched_OS_Process_Sampler" enabled="true">
                    <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                    <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                    <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                    <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="SystemSampler.directory"></stringProp>
                  </SystemSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                      <boolProp name="resetInterpreter">true</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;

java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.03Z&quot;;

String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));
String endPointUid = vars.get(&quot;endpoint_uid&quot;);
String jobPayload=&quot;{\&quot;id\&quot;:&quot;+jobId+&quot;,\&quot;state\&quot;:\&quot;dispatched\&quot;,\&quot;result\&quot;:\&quot;\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
byte[] jobPayloadByteArray = jobPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(jobPayloadByteArray);
String payloadHash =  Base64.getEncoder().encodeToString(digester.digest());
vars.put(&quot;jobPayload&quot;,jobPayload);
dPubKey=vars.get(&quot;devicePublicKey&quot;);
device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);
serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot;+&quot;\&quot;job_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ payloadHash+&quot;\&quot;&quot;+&quot;}&quot;;
vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.036) cmd-install-binary-app-catalog Status Dispatched Job" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;job&quot;:{&quot;job_payload&quot;:${jobPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/v1/jobs/${__V(jobId_${intCounter})}?auth_token=${DeviceToken}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${ip}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Expect</stringProp>
                          <stringProp name="Header.value">100-continue</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="cmd-install-binary-app-catalog finished_OS_Process_Sampler" enabled="true">
                    <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
                    <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
                    <stringProp name="SystemSampler.command">${shellFileDirectory}/sec_sign.sh</stringProp>
                    <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${filename}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}.pem</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Argument">
                          <stringProp name="Argument.name"></stringProp>
                          <stringProp name="Argument.value">${deviceId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="SystemSampler.directory"></stringProp>
                  </SystemSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Security Block BeanShell PreProcessor" enabled="true">
                      <boolProp name="resetInterpreter">true</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.lang.String;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Base64.Encoder;

java.sql.Date dt1 = new java.sql.Date(System.currentTimeMillis());
String dt1Text = dt1.toString();
Calendar cal = Calendar.getInstance();
cal.getTime();
SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
String ffr=sdf.format(cal.getTime());
String total;
tStamp=&quot;&quot;+dt1Text+&quot;T&quot;+ffr+&quot;.43Z&quot;;

String jobId=vars.get(&quot;jobId_&quot;+vars.get(&quot;intCounter&quot;));

String endPointUid = vars.get(&quot;endpoint_uid&quot;);


String jobPayload = &quot;{\&quot;id\&quot;:&quot;+jobId+&quot;,\&quot;state\&quot;:\&quot;finished\&quot;,\&quot;result\&quot;:\&quot;{\\\&quot;software_list\\\&quot;:[{\\\&quot;installed\\\&quot;:true,\\\&quot;installed_version\\\&quot;:\\\&quot;1.23.7.1\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;HP Touchpoint Manager Client\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Hewlett-Packard Company\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;_issuite_{24CB35EB-F445-4061-8C3A-67D5631996C5}\\\&quot;},{\\\&quot;installed\\\&quot;:false,\\\&quot;installed_version\\\&quot;:\\\&quot;\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;HP Touchpoint Manager Firewall Monitor\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Hewlett-Packard Company\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;{65F88F01-D51A-4F94-9138-37AC4756F686}\\\&quot;},{\\\&quot;installed\\\&quot;:false,\\\&quot;installed_version\\\&quot;:\\\&quot;\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;HP Touchpoint Manager System Health Manager\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Hewlett-Packard Company\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;{6441B86E-669F-4AFD-B707-2EF4D06CB15C}\\\&quot;},{\\\&quot;installed\\\&quot;:false,\\\&quot;installed_version\\\&quot;:\\\&quot;\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;HP Touchpoint Manager GeoSecurity\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Hewlett-Packard Company\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;{E22C6A30-E3B5-4889-BBE5-77D0304AE30F}\\\&quot;},{\\\&quot;installed\\\&quot;:true,\\\&quot;installed_version\\\&quot;:\\\&quot;8.3.39.21\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;HP Support Assistant\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Hewlett-Packard Company\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;{B4A46E3F-A5DF-4C68-8C38-88FD26F642BE}\\\&quot;},{\\\&quot;installed\\\&quot;:false,\\\&quot;installed_version\\\&quot;:\\\&quot;\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;HP Touchpoint Manager Patch Management\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Hewlett-Packard Company\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;{D1FB6814-C19E-42EA-B008-066977C4D04B}\\\&quot;},{\\\&quot;installed\\\&quot;:false,\\\&quot;installed_version\\\&quot;:\\\&quot;\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;HP Password Recovery\\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;Hewlett-Packard Company\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;{C74063EB-AD94-4E1B-8952-BDC26D3707AA}\\\&quot;},{\\\&quot;installed\\\&quot;:false,\\\&quot;installed_version\\\&quot;:\\\&quot;\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;HP Touchpoint Analytics Client \\\&quot;,\\\&quot;publisher\\\&quot;:\\\&quot;HP Inc.\\\&quot;,\\\&quot;upgrade_code\\\&quot;:\\\&quot;{E5FB98E0-0784-44F0-8CEC-95CD4690C43F}\\\&quot;}],\\\&quot;version\\\&quot;:1}\&quot;,\&quot;endpoint_uid\&quot;:\&quot;&quot;+endPointUid+&quot;\&quot;}&quot;;
byte[] jobPayloadByteArray = jobPayload.getBytes();
MessageDigest digester = MessageDigest.getInstance(&quot;SHA-256&quot;);
digester.update(jobPayloadByteArray);
String payloadHash =  Base64.getEncoder().encodeToString(digester.digest());

vars.put(&quot;jobPayload&quot;,jobPayload);

dPubKey=vars.get(&quot;devicePublicKey&quot;);

device = vars.get(&quot;deviceId&quot;);
sPublicKey=vars.get(&quot;server_public_key&quot;);

serverPublicKey = vars.get(&quot;server_pub_key&quot;);
String secBlock= &quot;{&quot;+&quot;\&quot;timestamp\&quot;&quot; + &quot;:&quot;+ &quot;\&quot;&quot; + tStamp + &quot;\&quot;&quot; + &quot;,&quot;+&quot;\&quot;job_payload_hash\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+ payloadHash+&quot;\&quot;&quot;+&quot;}&quot;;

vars.put(&quot;securityBlock&quot;,secBlock);
String fname=&quot;sec_block_&quot; + device +&quot;.txt&quot;;
vars.put(&quot;filename&quot;,fname);
f = new FileOutputStream(fname);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(secBlock);
f.close();

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="(1.037) cmd-install-binary-app-catalog Status Finished Job" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;job&quot;:{&quot;job_payload&quot;:${jobPayload},&quot;security_block&quot;:${securityBlock},&quot;security_block_signature&quot;:&quot;${__FileToString(${deviceId}.base64,,)}&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/api/v1/jobs/${__V(jobId_${intCounter})}?auth_token=${DeviceToken}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Host</stringProp>
                          <stringProp name="Header.value">${ip}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Expect</stringProp>
                          <stringProp name="Header.value">100-continue</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">vars.put(&quot;jobType&quot;,&quot;&quot;);
vars.put(&quot;jobId&quot;,&quot;&quot;);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
